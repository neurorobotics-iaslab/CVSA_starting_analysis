clc; clear all; close all;
% create the dataset log band power, all channels and freq 8-14

%% informations
selchs = {'P3', 'PZ', 'P4', 'POZ', 'O1', 'O2', 'P5', 'P1', 'P2', 'P6', 'PO5', 'PO3', 'PO4', 'PO6', 'PO7', 'PO8', 'OZ'};
c_subject = 'c7';
start_cf = 0; % from which second you extract data, with 0 take the start of the trial
end_cf   = 0; % end of the trial extracted, with 0 take all the trial length
train_percentage = 0.75;

classes = [730 731];
band = [8 14];
filterOrder = 4;

% not modification needed for these informations
sampleRate = 512;
sfile = ['/home/paolo/cvsa_ws/record/' c_subject '/dataset/logband_d_cf_' num2str(start_cf) '' num2str(end_cf) '_band_' num2str(band(1)) '' num2str(band(2)) '.mat'];

path = ['/home/paolo/cvsa_ws/record/' c_subject '/mat_selectedTrials'];
files = dir(fullfile(path, '*.mat'));

channels_label = {'FP1', 'FP2', 'F3', 'FZ', 'F4', 'FC1', 'FC2', 'C3', 'CZ', 'C4', 'CP1', 'CP2', 'P3', 'PZ', 'P4', 'POZ', 'O1', 'O2', 'EOG', ...
        'F1', 'F2', 'FC3', 'FCZ', 'FC4', 'C1', 'C2', 'CP3', 'CP4', 'P5', 'P1', 'P2', 'P6', 'PO5', 'PO3', 'PO4', 'PO6', 'PO7', 'PO8', 'OZ'};

% selchs = channels_label;

%% initialization variable to save
X = [];
y = [];

info.classes = classes;
info.sampleRate = sampleRate;
info.selchs = selchs;
info.startTimeCfExtracted = start_cf;
info.files = {};
info.band = band;
info.cfStart = [];
info.cfDur = [];
info.filterOrder = 4;
info.startNewFile = [0];
info.startcf = [];

%% check the end and start of extraction
if end_cf < start_cf && end_cf ~= 0
    disp('Errore nella selezione di inizio e fine dei trials')
elseif end_cf == 0 && start_cf == 0
    disp('take all the trial')
elseif end_cf == 0
    disp(['the end is the duration of the trial but start at ' num2str(start_cf)])
elseif start_cf == 0
    disp(['the start is at ' num2str(start_cf) ' end at the duration of the trial'])
end


%% take only interested data
for idx_f = 1:length(files)
    file = fullfile(path, files(idx_f).name);
    disp(['file (' num2str(idx_f) '/' num2str(length(files))  '): ', file])
    %file = '/home/paolo/prova32ch.gdf';
    load(file);
    info.files = cat(1, info.files, file);
    nchannels = length(channels_label);

    %% labeling
    disp('   Labelling')
    signal = signal(:,1:nchannels);
    events = header.EVENT;
    cuePOS = events.POS(events.TYP == 730 | events.TYP == 731);
    cueDUR = events.DUR(events.TYP == 730 | events.TYP == 731);
    cueTYP = events.TYP(events.TYP == 730 | events.TYP == 731);
    cfPOS  = events.POS(events.TYP == 781);
    cfDUR  = events.DUR(events.TYP == 781);
    nTrials = length(cueTYP);

    %% Initialization variables
    disp('   Initialization variables')
    frameSize = 32;
    bufferSize = 512;
    [b_low, a_low] = butter(filterOrder, band(2)*(2/sampleRate),'low');
    [b_high, a_high] = butter(filterOrder, band(1)*(2/sampleRate),'high');

    zi_low = [];
    zi_high = [];
    s_band = [];
    s_pow = [];
    s_avg = [];
    s_log = [];

    %% Iterate over trials
    for i=1:nTrials
        disp(['   trial ' num2str(i) '/' num2str(nTrials)])
        % initialization variables
        buffer = nan(bufferSize, nchannels);
        start_trial = cuePOS(i);
        end_trial = cfPOS(i) + cfDUR(i) - 1;
        % division for frameSize
        end_trial = ceil((end_trial-start_trial)/32)*32 + start_trial;
        data = signal(start_trial:end_trial,:);

        % application of the buffer
        nchunks = (end_trial-start_trial) / 32;
        for j = 1:nchunks
            frame = data((j-1)*frameSize+1:j*frameSize,:);
            buffer(1:end-frameSize,:) = buffer(frameSize+1:end,:);
            buffer(end-frameSize+1:end, :) = frame;

            % check
            if any(isnan(buffer))
                continue;
            end

            % apply low and high pass filters
            [s_low, zi_low] = filter(b_low,a_low,buffer,zi_low);
            [tmp_data,zi_high] = filter(b_high,a_high,s_low,zi_high);
            s_band = cat(1, s_band, tmp_data);

            % apply pow
            tmp_data = power(tmp_data, 2);
            s_pow = cat(1, s_pow, tmp_data);

            % apply average
            tmp_data = mean(tmp_data, 1);
            s_avg = cat(1, s_avg, tmp_data);

            % apply log
            tmp_data = log(tmp_data);
            s_log = cat(1, s_log, tmp_data);

            % save in the dataset
            X = cat(1, X, tmp_data);
            y = cat(1, y, repmat(cueTYP(i), size(tmp_data,1), 1));
            info.cfStart = cat(1, info.cfStart, size(X,1));
            info.startNewFile = cat(1, info.startNewFile, length(X));
        end
    end

    %% take only interested values
    disp('   Take only interested channels and save in dataset variables')
    idx_interest_ch = zeros(1, numel(selchs));
    for k=1:numel(selchs)
        idx_interest_ch(k) = find(strcmp(channels_label, selchs{k}));
    end
end

info.startTest = info.cfStart(floor(train_percentage * size(X,1)));
info.idx_selchs = idx_interest_ch;

%% save the values
save(sfile, 'X', 'y', 'info');